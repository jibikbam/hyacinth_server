<main class="mx-auto max-w-screen-lg">
  <.form let={f} for={@pipeline_changeset} phx-change="validate_pipeline" phx-submit="save_pipeline" class="flex">
    <div class="w-2/3">
      <div class="flex justify-between items-center">
        <h1>New Pipeline</h1>
      </div>

      <div class="mt-3 card">
        <div class="form-content form-wide">
          <p>
            <%= label f, :name %>
            <%= text_input f, :name, placeholder: "My Pipeline" %>
            <%= error_tag f, :name %>
          </p>

          <p>
            <%= label f, :description %>
            <%= textarea f, :description, placeholder: "A very cool pipeline." %>
            <%= error_tag f, :description %>
          </p>
        </div>
      </div>

      <div class="mt-6 flex justify-between items-center">
        <div class={length(inputs_for(f, :transforms)) > 0 && "mb-2 pb-1 w-full border-b border-gray-600"}>
          <h1>Steps</h1>
          <div class="mt-0.5 form-content"><%= error_tag f, :transforms, name: "Steps" %></div>
        </div>
      </div>

      <div class="mt-2 space-y-6">
        <%= if length(inputs_for(f, :transforms)) == 0 do %>
          <div class="p-4 rounded border border-gray-700">
            <div class="mx-auto w-96 text-center text-gray-400 space-y-2">
              <div class="text-2xl">No steps yet.</div>
              <div>Pipeline steps can sample your datasets or transform them from one format to another. A pipeline must have at least one step.</div>
            </div>
          </div>
        <% end %>
        <%= for {ft, i} <- Enum.with_index(inputs_for(f, :transforms)) do %>
          <div class="relative">
            <div class="absolute top-2 -left-20">
              <div class="w-14 h-14 text-3xl text-black font-semibold bg-gray-300 rounded-full shadow flex justify-center items-center">
                <%= i + 1 %>
              </div>
            </div>

            <div class="flex items-center space-x-3">
              <h3>Step <%= i + 1 %></h3>
              <.driver_format_tags driver={Ecto.Changeset.get_field(ft.source, :driver)} options={Ecto.Changeset.get_field(ft.source, :options)} />
            </div>

            <div class={["card mt-1 relative", not ft.source.valid? && "!border-red-500"]}>
              <div class="absolute top-4 right-4">
                <button type="button" class="text-red-500 hover:text-red-600 opacity-90 transition" phx-click="delete_transform" phx-value-index={i}>
                  <Icons.trash_solid />
                </button>
              </div>
              <%= hidden_input ft, :order_index, value: i %>
              <div class="form-content">
                <p>
                  <%= label ft, :driver %>
                  <%= select ft, :driver, Ecto.Enum.values(Transform, :driver) %>
                  <%= error_tag ft, :driver, always_show_errors: true %>
                </p>
              </div>

              <div class="mt-4">
                <div class="flex items-center space-x-1">
                  <div class="text-gray-300">Options</div>
                  <button
                    type="button"
                    class="p-0.5 text-blue-400 hover:text-blue-500 rounded focus:outline-none focus:ring-2 ring-blue-400 focus:hover:ring-blue-500 transition"
                    phx-click="edit_transform_options"
                    phx-value-index={i}
                  >
                    <Icons.pencil_square_mini />
                  </button>
                </div>

                <div class="mt-1">
                  <.options_table options={Ecto.Changeset.get_field(ft.source, :options)} />
                </div>
              </div>

            </div>
          </div>
        <% end %>
      </div>

      <div class="mt-6 flex justify-center">
        <button type="button" class="btn btn-blue btn-icon" phx-click="add_transform">
          <span class="opacity-90"><Icons.plus_circle_mini /></span>
          <span>Add Step</span>
        </button>
      </div>
    </div>

    <div class="mt-12 ml-6 w-1/3">
      <div class="sticky top-2">

        <div class="card">
          <div class="text-sm text-gray-400">
            <div class="flex items-center space-x-1">
              <div class="text-lg">Steps</div>
              <button
                type="button"
                class="p-0.5 text-blue-400 hover:text-blue-500 rounded focus:outline-none focus:ring-2 ring-blue-400 focus:hover:ring-blue-500 transition"
                phx-click="add_transform"
              >
                <Icons.plus_mini />
              </button>
            </div>

            <div class="mt-1 py-2 border-t border-b-0 border-gray-600">
              <%= if length(Ecto.Changeset.get_field(@pipeline_changeset, :transforms)) == 0 do %>
                <div class="text-gray-500">No steps yet</div>
              <% end %>

              <table>
                <tbody>
                  <%= for transform <- Ecto.Changeset.get_field(@pipeline_changeset, :transforms) do %>
                    <tr>
                      <td class="pr-2 text-gray-500 font-mono"><%= transform.order_index + 1 %>)</td>
                      <td class="pr-2"><%= transform.driver %></td>
                      <td>
                        <.driver_format_tags driver={transform.driver} options={transform.options} light={true} />
                      </td>
                    </tr>
                  <% end %>
                </tbody>
              </table>

            </div>
          </div>
        </div>

        <div class="mt-3 mb-1 flex justify-start">
          <%= submit class: "btn btn-jumbo btn-icon btn-blue" do %>
            <span class="opacity-80"><Icons.check_circle_solid /></span>
            <span>Save Pipeline</span>
          <% end %>
        </div>

      </div>
    </div>
  </.form>
</main>

<div>
  <%= case @modal do %>
  <% {:transform_options, {index, driver, options_params}} -> %>
    <.live_component
      module={HyacinthWeb.PipelineLive.TransformOptionsModal}
      id="transform_options_modal"
      index={index}
      driver={driver}
      options_params={options_params}
    />
  <% nil -> %>
  <% end %>
</div>
